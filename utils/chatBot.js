import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";
import dotenv from "dotenv";
import axios from "axios";
import Tour from "../models/Tour.js";

dotenv.config();

const apiKey = process.env.GEMINI_API_KEY;

if (!apiKey) {
  throw new Error("GEMINI_API_KEY is not defined in .env file");
}

// ƒê·∫∑t ·ªü ƒë·∫ßu file controller c·ªßa b·∫°n
const cityList = [
  { name: "Thailand", aliases: ["thailand", "th√°i", "th√°i lan"] },
  { name: "China", aliases: ["china", "trung", "trung qu·ªëc"] },
  { name: "H√†n Qu·ªëc", aliases: ["korea", "corea", "h√†n"] },
  { name: "Nh·∫≠t B·∫£n", aliases: ["japan", "nh·∫≠t"] },
  { name: "ƒê√† N·∫µng", aliases: ["da nang"] },
  { name: "H√† N·ªôi", aliases: ["ha noi"] },
  { name: "Malaysia", aliases: ["malay", "malai"] },
  { name: "Singapore", aliases: ["sing"] },
  { name: "Indonesia", aliases: ["indo"] },
  { name: "H·ªì Ch√≠ Minh", aliases: ["hcm"] },
  { name: "Hu·∫ø", aliases: ["hue"] },
];

const findCanonicalCity = (text) => {
  if (!text) return null;
  const lowerText = text.toLowerCase();
  for (const city of cityList) {
    if (lowerText.includes(city.name.toLowerCase())) {
      return city.name;
    }
    for (const alias of city.aliases) {
      if (lowerText.includes(alias)) {
        return city.name;
      }
    }
  }
  return null;
};

export const getAiAnalysis = async (history, query) => {
  try {
    const model = "gemini-2.5-flash-preview-05-20";
    const prompt = `
      B·∫°n l√† AI x·ª≠ l√Ω ng√¥n ng·ªØ cho chatbot du l·ªãch. Ph√¢n t√≠ch tin nh·∫Øn ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ m·ªôt object JSON DUY NH·∫§T c√≥ c·∫•u tr√∫c:
      {
        "intent": "TOUR" | "GENERAL",
        "keywords": { "cities": string[]|null, "day": number|null, "price": number|null } | null
      }

      QUY T·∫ÆC:
      1. 'intent' l√† "TOUR" n·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ tour du l·ªãch. N·∫øu kh√¥ng, 'intent' l√† "GENERAL".
      2. N·∫øu 'intent' l√† "TOUR", tr√≠ch xu·∫•t 'keywords' (cities l√† m·ªôt m·∫£ng).
      3. N·∫øu 'intent' l√† "GENERAL", 'keywords' PH·∫¢I l√† null.

      L·ªãch s·ª≠ tr√≤ chuy·ªán:
      ---
      ${history.map(turn => `${turn.role === "user" ? "User" : "Bot"}: ${turn.parts[0].text}`).join("\n")}
      ---
      Tin nh·∫Øn m·ªõi nh·∫•t: "${query}"
      ---
      Ch·ªâ tr·∫£ v·ªÅ object JSON.
    `;

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`,
      {
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: { responseMimeType: "application/json" },
      },
      { params: { key: apiKey } }
    );
    
    const analysisResult = JSON.parse(response.data.candidates?.[0]?.content?.parts?.[0]?.text);
    console.log("AI Analysis Result:", analysisResult);
    return analysisResult;
  } catch (error) {
    console.error("L·ªói khi ph√¢n t√≠ch AI:", error.message);
    return { intent: 'GENERAL', keywords: null };
  }
};

export const getTourByKeywords = async (keywords, res) => {
  try {
    const searchCriteria = { isDelete: false };

    // Logic n√†y gi·ªù s·∫Ω ho·∫°t ƒë·ªông tr√™n m·∫£ng cities ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
    if (keywords.cities && keywords.cities.length > 0) {
      const cityRegex = new RegExp(`^${keywords.cities.map(city => `(?=.*${city})`).join('')}.*$`, 'i');
      searchCriteria.city = cityRegex;
    }
    if (keywords.day) {
      searchCriteria.day = { $eq: parseInt(keywords.day) };
    }
    if (keywords.price) {
      const targetPrice = parseInt(keywords.price);
      const range = 1100000;
      searchCriteria.price = {
        $gte: targetPrice - range,
        $lte: targetPrice + range,
      };
    }

    const tours = await Tour.find(searchCriteria).limit(5);
    
    let responseText = `üîç T√¨m th·∫•y ${tours.length} tour ph√π h·ª£p.\n`;
    if (tours.length > 0) {
      responseText += tours.map(
        (tour, idx) => `\n${idx + 1}. üß≠ *${tour.title}* - üìç ${tour.city} - üíµ ${tour.price.toLocaleString()} VNƒê`
      ).join("\n");
    }
    return res.json({ text: responseText });

  } catch (err) {
    console.error("Search error:", err.message);
    return res.status(500).json({ message: "L·ªói khi t√¨m ki·∫øm tour." });
  }
};

export const analyzeImageAndGetResponse = async (image, query) => {
  try {
    const model = "gemini-2.5-flash-preview-05-20";

    const prompt = `
      B·∫°n l√† m·ªôt tr·ª£ l√Ω du l·ªãch v√† chuy√™n gia ƒë·ªãa l√Ω. H√£y ph√¢n t√≠ch h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p.
      1.  Nh·∫≠n di·ªán ƒë·ªãa danh, th√†nh ph·ªë, ho·∫∑c qu·ªëc gia trong ·∫£nh.
      2.  N·∫øu trong ·∫£nh c√≥ m√≥n ƒÉn, h√£y cho bi·∫øt t√™n m√≥n ƒÉn v√† n√≥ l√† ƒë·∫∑c s·∫£n ·ªü ƒë√¢u.
      3.  N·∫øu ng∆∞·ªùi d√πng c√≥ c√¢u h·ªèi k√®m theo ("${query}"), h√£y tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung ·∫£nh. N·∫øu kh√¥ng c√≥, kh√¥ng c·∫ßn m√¥ t·∫£ ·∫£nh.
      4.  B·ªè c√°c ti√™u ƒë·ªÅ 1. 2. M√¥ t·∫£ ng·∫Øn g·ªçn, x√∫c t√≠ch. N·∫øu kh√¥ng c√≥ m√≥n ƒÉn th√¨ kh√¥ng c·∫ßn ƒë·ªÅ c·∫≠p ƒë·∫øn m√≥n ƒÉn.
      5.  N·∫øu kh√¥ng th·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c ho·∫∑c kh√¥ng ch·∫Øc ch·∫Øn, h√£y n√≥i r√µ "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ nh·∫≠n di·ªán ƒë∆∞·ª£c ƒë·ªãa ƒëi·ªÉm trong ·∫£nh n√†y."
      6.  To√†n b·ªô c√¢u tr·∫£ l·ªùi ph·∫£i b·∫±ng ti·∫øng Vi·ªát.
    `;

    // C·∫•u tr√∫c payload cho Gemini Vision
    const requestPayload = {
      contents: [
        {
          parts: [
            { text: prompt },
            {
              inline_data: {
                mime_type: image.mime_type,
                data: image.data,
              },
            },
          ],
        },
      ],
    };

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`,
      requestPayload,
      {
        params: { key: apiKey },
      }
    );

    const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!text) {
      throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini Vision.");
    }
    return text;
  } catch (error) {
    console.error(
      "L·ªói khi g·ªçi Gemini Vision API:",
      error.response?.data?.error || error.message
    );
    return "ƒê√£ c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch h√¨nh ·∫£nh c·ªßa b·∫°n.";
  }
};

export const getGeneralAiResponse = async (history, query) => {
  try {
    const model = "gemini-2.5-flash-preview-05-20";

    // Gh√©p n·ªëi l·ªãch s·ª≠ v√† c√¢u h·ªèi m·ªõi ƒë·ªÉ t·∫°o ng·ªØ c·∫£nh ho√†n ch·ªânh
    const conversationHistory = [
      ...history,
      { role: "user", parts: [{ text: query }] },
    ];

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`,
      {
        // G·ª≠i to√†n b·ªô l·ªãch s·ª≠ ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi theo ng·ªØ c·∫£nh
        contents: conversationHistory,
        // Th√™m m·ªôt ch·ªâ d·∫´n h·ªá th·ªëng (t√πy ch·ªçn nh∆∞ng n√™n c√≥)
        systemInstruction: {
          parts: [
            {
              text: "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán v√† h·ªØu √≠ch t√™n l√† TravelBot. H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n v√† ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát.",
            },
          ],
        },
      },
      { params: { key: apiKey } }
    );

    const text = response.data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (!text) {
      return "Xin l·ªói, t√¥i ch∆∞a nghƒ© ra c√¢u tr·∫£ l·ªùi. B·∫°n c√≥ th·ªÉ h·ªèi kh√°c ƒë∆∞·ª£c kh√¥ng?";
    }
    return text;
  } catch (error) {
    console.error("L·ªói khi l·∫•y c√¢u tr·∫£ l·ªùi chung:", error.message);
    return "H·ªá th·ªëng AI ƒëang g·∫∑p s·ª± c·ªë, vui l√≤ng th·ª≠ l·∫°i sau.";
  }
};

export const handleChatRequest = async (req, res) => {
  const { history, query, image } = req.body;

  // Lu·ªìng 1: X·ª≠ l√Ω ·∫£nh (kh√¥ng ƒë·ªïi)
  if (image && image.data) {
    console.log("-> Lu·ªìng: X·ª≠ l√Ω h√¨nh ·∫£nh");
    const descriptionText = await analyzeImageAndGetResponse(image, query);
    return res.json({ text: descriptionText });
  }

  if (!query) {
    return res.status(400).json({ message: "Thi·∫øu query t·ª´ ng∆∞·ªùi d√πng." });
  }

  // Lu·ªìng 2 & 3: G·ªçi h√†m ph√¢n t√≠ch AI "All-in-One" duy nh·∫•t
  const analysis = await getAiAnalysis(history, query);

  if (analysis.intent === 'TOUR' && analysis.keywords) {
    console.log("-> Lu·ªìng: X·ª≠ l√Ω Tour");

    // ===== B∆Ø·ªöC CHU·∫®N H√ìA D·ªÆ LI·ªÜU (ƒê·∫∂T T·∫†I ƒê√ÇY) =====
    const keywordsFromAI = analysis.keywords;
    let normalizedCities = [];

    if (keywordsFromAI.cities && Array.isArray(keywordsFromAI.cities)) {
      const citySet = new Set();
      keywordsFromAI.cities.forEach(cityFromAI => {
        const canonicalName = findCanonicalCity(cityFromAI); // S·ª≠ d·ª•ng h√†m tr·ª£ gi√∫p
        if (canonicalName) {
          citySet.add(canonicalName);
        }
      });
      normalizedCities = [...citySet];
    }
    
    // T·∫°o m·ªôt object keywords m·ªõi ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a ƒë·ªÉ truy·ªÅn ƒëi
    const normalizedKeywords = {
      ...keywordsFromAI, // Copy c√°c key kh√°c nh∆∞ day, price
      cities: normalizedCities, // Ghi ƒë√® b·∫±ng m·∫£ng ƒë√£ chu·∫©n h√≥a
    };
    
    console.log("Keywords ƒë√£ chu·∫©n h√≥a ƒë·ªÉ t√¨m ki·∫øm:", normalizedKeywords);

    // G·ªçi h√†m t√¨m ki·∫øm v·ªõi d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
    return getTourByKeywords(normalizedKeywords, res);
  } else {
    // Lu·ªìng GENERAL (kh√¥ng ƒë·ªïi)
    console.log("-> Lu·ªìng: X·ª≠ l√Ω c√¢u h·ªèi chung");
    const generalText = await getGeneralAiResponse(history, query);
    return res.json({ text: generalText });
  }
};
